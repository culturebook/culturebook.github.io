'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

module.exports = function () {
  function Example(classPrefix, node, index, parent) {
    _classCallCheck(this, Example);

    this.classPrefix = classPrefix;
    this.node = node;
    this.index = index;
    this._index = this.index + 1;
    this.parent = parent;
  }

  _createClass(Example, [{
    key: 'output',
    value: function output() {
      this.parent.children.splice(this._index, 0, _extends({}, this.node, {
        type: 'code',
        lang: 'html'
      }));

      return '\n    <div class="' + this.classPrefix + '-example__container">\n      ' + this.node.value + '\n    </div>\n    ';
    }
  }]);

  return Example;
}();