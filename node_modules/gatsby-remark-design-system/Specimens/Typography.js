'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

module.exports = function () {
  function Typography(classPrefix, valueMap) {
    _classCallCheck(this, Typography);

    this.classPrefix = classPrefix;
    this.valueMap = valueMap;
  }

  _createClass(Typography, [{
    key: 'typo',
    value: function typo() {
      var _this = this;

      return this.valueMap.map(function (t) {
        return '<div class="' + _this.classPrefix + '-typo__item">\n      <div class="' + _this.classPrefix + '-typo__item__name" style="font-size: ' + t.size + 'px; font-weight: ' + t.weight + '">\n        ' + t.name + '\n      </div>\n      <div class="' + _this.classPrefix + '-typo__item__info">\n        <div class="' + _this.classPrefix + '-typo__item__info__desc">\n\t\t\t\t\t\t<p>Metrics</p>\n\t\t\t\t\t\t<p>' + t.metrics + '</p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="' + _this.classPrefix + '-typo__item__info__desc">\n\t\t\t\t\t\t<p>Weight</p>\n\t\t\t\t\t\t<p>' + t.weightDesc + '</p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="' + _this.classPrefix + '-typo__item__info__desc">\n            <p>Usage</p>\n            <p>' + t.usage + '</p>\n\t\t\t\t</div>\n      </div>\n    </div>';
      }).join('');
    }
  }, {
    key: 'output',
    value: function output() {
      return '\n      <div class="' + this.classPrefix + '-typo__container">\n        ' + this.typo() + '\n      </div>\n    ';
    }
  }]);

  return Typography;
}();