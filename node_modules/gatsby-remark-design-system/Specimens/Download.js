'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var svg = require('../utils/svg');
var kebabCase = require('lodash/kebabCase');

module.exports = function () {
  function Download(classPrefix, color) {
    var image = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'false';
    var src = arguments[3];
    var subtitle = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';
    var title = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'No title defined';
    var width = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : '200px';

    _classCallCheck(this, Download);

    this.classPrefix = classPrefix;
    this.color = color;
    this.image = image;
    this.src = src;
    this.subtitle = subtitle;
    this.title = title;
    this.width = width;
    this.filename = kebabCase(this.title);
  }

  _createClass(Download, [{
    key: 'output',
    value: function output() {
      return '\n      <a href=' + this.src + ' download=' + this.filename + ' class="' + this.classPrefix + '-download__container">\n        <div class="' + this.classPrefix + '-download__info">\n          <div class="' + this.classPrefix + '-download__info__left">\n            ' + svg.download() + this.title + '\n          </div>\n          <div class="' + this.classPrefix + '-download__info__right">\n            ' + this.subtitle + '\n          </div>\n        </div>\n        ' + (this.image === 'true' ? '<div class="' + this.classPrefix + '-download__preview" style="background: ' + this.color + ';">\n        <img src=' + this.src + ' alt="' + this.title + '" style="width: ' + this.width + ';" class="' + this.classPrefix + '-download__image">\n      </div>' : '') + '\n      </a>\n    ';
    }
  }]);

  return Download;
}();