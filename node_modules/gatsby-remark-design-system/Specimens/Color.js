'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ty = require('tinycolor2');
var colors = require('../utils/colors');

module.exports = function () {
  function Color(classPrefix, color) {
    var name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'No name defined';

    _classCallCheck(this, Color);

    this.classPrefix = classPrefix;
    this.color = color;
    this.name = name;
    this.tyColor = ty(this.color);
    this.hex = this.tyColor.toHexString();
    this.rgb = this.tyColor.toRgb();
    this.cmyk = colors.RGBToCMYK(this.rgb.r, this.rgb.g, this.rgb.b);
  }

  _createClass(Color, [{
    key: 'blackSmall',
    value: function blackSmall() {
      return ty.isReadable('black', this.color, { level: 'AA', size: 'small' });
    }
  }, {
    key: 'blackLarge',
    value: function blackLarge() {
      return ty.isReadable('black', this.color, { level: 'AA', size: 'large' });
    }
  }, {
    key: 'whiteSmall',
    value: function whiteSmall() {
      return ty.isReadable('white', this.color, { level: 'AA', size: 'small' });
    }
  }, {
    key: 'whiteLarge',
    value: function whiteLarge() {
      return ty.isReadable('white', this.color, { level: 'AA', size: 'large' });
    }
  }, {
    key: 'output',
    value: function output() {
      return '\n    <div class="' + this.classPrefix + '-color__container">\n      <div class="' + this.classPrefix + '-color__swatch" style="background: ' + this.color + ';">\n        <div class="' + this.classPrefix + '-color__swatch__a11y">\n          <div class="' + this.classPrefix + '-color__swatch__a11y__char" style="font-size: 0.8rem; color: black;">\n\t\t\t\t\t\tA\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="' + this.classPrefix + '-color__swatch__a11y__status">\n\t\t\t\t\t\t' + (this.blackSmall() ? 'Pass' : 'Fail') + '\n\t\t\t\t\t</div>\n        </div>\n        <div class="' + this.classPrefix + '-color__swatch__a11y">\n          <div class="' + this.classPrefix + '-color__swatch__a11y__char" style="color: black;">\n\t\t\t\t\t\tA\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="' + this.classPrefix + '-color__swatch__a11y__status">\n\t\t\t\t\t\t' + (this.blackLarge() ? 'Pass' : 'Fail') + '\n\t\t\t\t\t</div>\n        </div>\n        <div class="' + this.classPrefix + '-color__swatch__a11y">\n          <div class="' + this.classPrefix + '-color__swatch__a11y__char" style="font-size: 0.8rem;">\n\t\t\t\t\t\tA\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="' + this.classPrefix + '-color__swatch__a11y__status">\n\t\t\t\t\t\t' + (this.whiteSmall() ? 'Pass' : 'Fail') + '\n\t\t\t\t\t</div>\n        </div>\n        <div class="' + this.classPrefix + '-color__swatch__a11y">\n          <div class="' + this.classPrefix + '-color__swatch__a11y__char">\n\t\t\t\t\t\tA\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="' + this.classPrefix + '-color__swatch__a11y__status">\n\t\t\t\t\t\t' + (this.whiteLarge() ? 'Pass' : 'Fail') + '\n\t\t\t\t\t</div>\n        </div>\n      </div>\n      <div class="' + this.classPrefix + '-color__info">\n        <div class="' + this.classPrefix + '-color__info__item">\n\t\t\t\t\t<p>Name</p>\n\t\t\t\t\t<p>' + this.name + '</p>\n\t\t\t\t</div>\n\t\t\t\t<div class="' + this.classPrefix + '-color__info__item">\n\t\t\t\t\t<p>Hex</p>\n\t\t\t\t\t<p>' + this.hex + '</p>\n\t\t\t\t</div>\n\t\t\t\t<div class="' + this.classPrefix + '-color__info__item">\n\t\t\t\t\t<p>RGB</p>\n\t\t\t\t\t<p>' + this.rgb.r + ', ' + this.rgb.g + ', ' + this.rgb.b + '</p>\n\t\t\t\t</div>\n\t\t\t\t<div class="' + this.classPrefix + '-color__info__item">\n\t\t\t\t\t<p>CMYK</p>\n\t\t\t\t\t<p>' + this.cmyk.C + ', ' + this.cmyk.M + ', ' + this.cmyk.Y + ', ' + this.cmyk.K + '</p>\n\t\t\t\t</div>\n      </div>\n    </div>\n    ';
    }
  }]);

  return Color;
}();