'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var svg = require('../utils/svg');

module.exports = function () {
  function Video() {
    var autoplay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'false';
    var classPrefix = arguments[1];
    var loop = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'false';
    var muted = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'false';
    var name = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'No name defined';
    var src = arguments[5];

    _classCallCheck(this, Video);

    this.autoplay = autoplay;
    this.classPrefix = classPrefix;
    this.loop = loop;
    this.muted = muted;
    this.name = name;
    this.src = src;
  }

  _createClass(Video, [{
    key: 'output',
    value: function output() {
      return '\n    <div class="' + this.classPrefix + '-video__container">\n      <div class="' + this.classPrefix + '-video__title">' + svg.video() + this.name + '</div>\n      <video class="' + this.classPrefix + '-video__videofile" src=' + this.src + ' controls ' + (this.muted === 'true' ? 'muted' : '') + ' ' + (this.autoplay === 'true' ? 'autoplay' : '') + ' ' + (this.loop === 'true' ? 'loop' : '') + ' />\n    </div>\n    ';
    }
  }]);

  return Video;
}();