'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var parser = require('./parser');
var Audio = require('../Specimens/Audio');
var Color = require('../Specimens/Color');
var ColorPalette = require('../Specimens/ColorPalette');
var Download = require('../Specimens/Download');
var Example = require('../Specimens/Example');
var Hint = require('../Specimens/Hint');
var Typography = require('../Specimens/Typography');
var Video = require('../Specimens/Video');

module.exports = function () {
  function Transformer() {
    _classCallCheck(this, Transformer);
  }

  _createClass(Transformer, null, [{
    key: 'transform',
    value: function transform(SpecimenName, SpecimenOption, node, classPrefix, index, parent) {
      // Set the width to 6 by default which means 100% width
      var _span = 6;
      var nodeValue = node.value;
      if (SpecimenName === 'audio') {
        var value = parser.standardParse(nodeValue);
        var autoplay = value.autoplay,
            loop = value.loop,
            name = value.name,
            src = value.src;

        if (value.span) {
          _span = value.span;
        }
        var Specimen = new Audio(autoplay, classPrefix, loop, name, src);
        return {
          SpecimenSpan: _span,
          SpecimenOutput: Specimen.output()
        };
      } else if (SpecimenName === 'color') {
        var _value = parser.standardParse(nodeValue);
        var color = _value.color,
            _name = _value.name;

        var _Specimen = new Color(classPrefix, color, _name);
        return {
          SpecimenSpan: _span,
          SpecimenOutput: _Specimen.output()
        };
      } else if (SpecimenName === 'color-palette') {
        var _value2 = parser.paletteParse(nodeValue);
        var _Specimen2 = new ColorPalette(classPrefix, _value2);
        return {
          SpecimenSpan: _span,
          SpecimenOutput: _Specimen2.output()
        };
      } else if (SpecimenName === 'download') {
        var _value3 = parser.standardParse(nodeValue);
        var _color = _value3.color,
            image = _value3.image,
            _src = _value3.src,
            subtitle = _value3.subtitle,
            title = _value3.title,
            width = _value3.width;

        if (_value3.span) {
          _span = _value3.span;
        }
        var _Specimen3 = new Download(classPrefix, _color, image, _src, subtitle, title, width);
        return {
          SpecimenSpan: _span,
          SpecimenOutput: _Specimen3.output()
        };
      } else if (SpecimenName === 'example') {
        var _Specimen4 = new Example(classPrefix, node, index, parent);
        return {
          SpecimenSpan: _span,
          SpecimenOutput: _Specimen4.output()
        };
      } else if (SpecimenName === 'hint') {
        var _Specimen5 = new Hint(classPrefix, nodeValue, SpecimenOption);
        return {
          SpecimenSpan: _span,
          SpecimenOutput: _Specimen5.output()
        };
      } else if (SpecimenName === 'typography') {
        var _value4 = parser.typographyParse(nodeValue);
        var _Specimen6 = new Typography(classPrefix, _value4);
        return {
          SpecimenSpan: _span,
          SpecimenOutput: _Specimen6.output()
        };
      } else if (SpecimenName === 'video') {
        var _value5 = parser.standardParse(nodeValue);
        var _autoplay = _value5.autoplay,
            _loop = _value5.loop,
            muted = _value5.muted,
            _name2 = _value5.name,
            _src2 = _value5.src;

        if (_value5.span) {
          _span = _value5.span;
        }
        var _Specimen7 = new Video(_autoplay, classPrefix, _loop, muted, _name2, _src2);
        return {
          SpecimenSpan: _span,
          SpecimenOutput: _Specimen7.output()
        };
      }
      return {
        SpecimenSpan: _span,
        SpecimenOutput: null
      };
    }
  }]);

  return Transformer;
}();