'use strict';

var visit = require('unist-util-visit');
var Transformer = require('./utils/Transformer');

function width(Span) {
  if (Span === 6) {
    return 'flex-basis: 100%; max-width: 100%;';
  }
  return 'flex-basis: calc(' + Span + ' / 6 * 100% - 10px); max-width: calc(' + Span + ' / 6 * 100% - 10px)';
}

module.exports = function (_ref) {
  var markdownAST = _ref.markdownAST;

  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref2$classPrefix = _ref2.classPrefix,
      classPrefix = _ref2$classPrefix === undefined ? 'grds' : _ref2$classPrefix;

  visit(markdownAST, 'code', function (node, index, parent) {
    // Get the specimen name (required) and the options (optional)
    var spec = false;
    var specOpt = false;
    // Don't parse code blocks without language
    if (node.lang) {
      spec = node.lang.split('|')[0];
      specOpt = node.lang.split('|')[1];
    }

    var SpecimenName = 'none';
    var SpecimenOption = 'none';
    if (spec) {
      SpecimenName = spec.toLowerCase().trim();
    }
    if (specOpt) {
      SpecimenOption = specOpt.toLowerCase().trim();
    }

    // Set the outer class name
    var className = classPrefix + '-' + SpecimenName;

    var TransformedSpecimen = Transformer.transform(SpecimenName, SpecimenOption, node, classPrefix, index, parent);
    var Span = TransformedSpecimen.SpecimenSpan;
    var Output = TransformedSpecimen.SpecimenOutput;

    // Keep other code blocks which are not a specimen untouched
    if (Output != null) {
      // Output our specimen
      node.type = 'html';
      node.value = '<div class="' + className + ' ' + classPrefix + '-wrapper" style="box-sizing: border-box; display: flex; flex-wrap: wrap; padding: 0; position: relative; ' + width(Span) + '">\n          ' + Output + '\n        </div>';
    }
  });
};